<?php
namespace common\models;

use Yii;
use yii\db\ActiveRecord;

class Common extends ActiveRecord
{
    public $_db = null;
    public $tableColumns = null;
    public $tableComment = null;
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->_db = Yii::$app->db;
        $this->initTableColumns();
        $this->createField();
    }

    /**
     * 为子类创建成员变量 变量名称为列名
     */
    protected function createField() {
        foreach ($this->tableColumns as $k => $v) {
            $this->$k = null;
        }
    }

    public static function tableName()
    {
        return '{{%common_info}}'; // TODO: Change the autogenerated stub
    }

    /**
     * 根据各种条件获取数据
     *
     * @param string $where
     * @param string $field
     * @param string $order
     * @param string $offset
     * @param string $limit
     *
     * @return array|ActiveRecord[]
     */
    public static function getByWhere($where = '', $field = '', $order = '', $offset = '', $limit = '')
    {
//        $obj = self::find()->where($where);
//        echo $obj->createCommand()->getRawSql();
        return self::find()->where($where)->select($field)->orderBy($order)->offset($offset)->limit($limit)->asArray()->all();
    }

    /**
     * 查询并记录日志
     * @param array  $where
     * @param string $field
     * @param string $order
     * @param string $offset
     * @param string $limit
     *
     * @return array|ActiveRecord[]
     */
    public function getByWhereWithLog($where = [], $field = '', $order = '', $offset = '', $limit = '') {
        if (!is_array($where)) {
            return [];
        }
        $this->initTableColumns();
        $this->initTableComment();
        $logCondition = [];
        foreach ($this->tableColumns as $filed => $column) {
            foreach ($where as $k => $v) {
                $logCondition[] = ['where' => $column['comment'], 'value' => $column];
            }
        }
        Operate::recordOperate('查询-'. $this->tableComment, [], $logCondition);
        return self::find()->where($where)->select($field)->orderBy($order)->offset($offset)->limit($limit)->asArray()->all();
    }

    /**
     * 根据条线获取andWhere
     *
     * @param string $where
     * @param array  $andWhere
     * @param string $field
     * @param string $order
     * @param string $offset
     * @param string $limit
     *
     * @return array|ActiveRecord[]
     */
    public static function getByAndWhere($where = '', $andWhere = [], $field = '', $order = '', $offset = '', $limit = '')
    {
//        $obj = self::find()->where($where);
//        echo $obj->createCommand()->getRawSql();
        return self::find()->where($where)->andWhere($andWhere)->select($field)->orderBy($order)->offset($offset)->limit($limit)->asArray()->all();
    }
    /**
     * 根据条线获取andWhere
     *
     * @param string $where
     * @param array  $andWhere
     * @param string $field
     * @param string $order
     * @param string $offset
     * @param string $limit
     *
     * @return array|ActiveRecord[]
     */
    public static function getByAndWheres($where = '', $andWhere = [], $field = '', $order = '', $offset = '', $limit = '')
    {
        $obj = self::find()->where($where);
        if (!empty($andWhere)) {
            foreach ($andWhere as $v) {
                $obj->andWhere($v);
            }
        }
//        echo $obj->createCommand()->getRawSql();die;
        return $obj->select($field)->orderBy($order)->offset($offset)->limit($limit)->asArray()->all();
    }

    /**
     * 根据各种条件获取数据
     *
     * @param array $where
     * @param array $field
     *
     * @return array|null|ActiveRecord
     */
    public static function getOneByWhere($where = [], $field = [])
    {
//                $obj = self::find()->where($where);
//        var_dump($obj->createCommand()->getRawSql());
        //return self::find()->where($where)->select($field)->asArray()->one();
        return self::find()->where($where)->select($field)->asArray()->one();
    }

    /**
     * 根据各种条件获取数据
     *
     * @param array $where
     * @param array $andWhere
     * @param array $field
     *
     * @return array|null|ActiveRecord
     */
    public static function getOneByWhereAndWhere($where = [], $andWhere = [],$field = [])
    {
        return self::find()->where($where)->andWhere($andWhere)->select($field)->asArray()->one();
//        $obj = self::find()->andWhere($andWhere);
//        var_dump($obj->createCommand()->getRawSql());die;

    }

    /**
     * 通过ID获取多条信息
     *
     * @param int    $id
     * @param string $field
     *
     * @return array|ActiveRecord[]
     */
    public static function getInfoById($id = 0, $field = '*')
    {
        return self::find()->where(['id' => $id])->select($field)->asArray()->all();
    }

    /**
     * 通过ID获取一条信息
     *
     * @param int    $id
     * @param string $field
     *
     * @return array|null|ActiveRecord
     */
    public static function getOneInfoById($id = 0, $field = '*')
    {
//        var_dump($id);
//                $obj = self::find()->where(['id' => $id]);
//        var_dump($obj->createCommand()->getRawSql());
        return self::find()->where(['id' => $id])->select($field)->asArray()->one();
    }

    /**
     * 通过ID获取一条信息
     *
     * @param int    $id
     * @param string $field
     *
     * @return array|null|ActiveRecord
     */
    public static function getOneInfoByOrderId($order_number = 0, $field = '*')
    {
//        var_dump($id);
//                $obj = self::find()->where(['id' => $id]);
//        var_dump($obj->createCommand()->getRawSql());
        return self::find()->where(['order_number' => $order_number])->select($field)->asArray()->one();
    }

    /**
     * 根据WHERE条件获取总条数
     *
     * @param string $where
     *
     * @return int|string
     */
    public static function getCountByWhere($where = '')
    {
        return self::find()->select(self::primaryKey())->where($where)->count();
    }

    /**
     * 根据WHERE条件获取总条数
     *
     * @param array $where
     * @param array $andWhere
     *
     * @return int|string
     */
    public static function getCountByWhereAndWhere($where = [], $andWhere = [])
    {
        return self::find()->select(self::primaryKey())->where($where)->andWhere($andWhere)->select(self::primaryKey())->where($where)->andWhere($andWhere)->count();
    }

    /**
     * 根据WHERE条件获取总条数
     *
     * @param array $where
     * @param array $andWhere
     *
     * @return int|string
     */
    public static function getCountByWhereAndWheres($where = [], $andWhere = [])
    {
        $obj = self::find()->where($where);
        if (!empty($andWhere)) {
            foreach ($andWhere as $v) {
                $obj->andWhere($v);
            }
        }
        return $obj->select(self::primaryKey())->where($where)->andWhere($andWhere)->count();
    }

    /**
     * 统计指定字段的总数
     * @param string $where
     * @param string $field
     * @return array|null|ActiveRecord
     */
    public function getSumByWhere($where = '', $field = '') {
        $sumInfo = self::find()->select(['SUM('.$field.') as '.$field])->where($where)->asArray()->one();
        return $sumInfo[$field];
    }

    /**
     * 统计指定字段的总数
     *
     * @param string $where
     * @param string $andWhere
     * @param string $field
     *
     * @return array|null|ActiveRecord
     */
    public static function getSumByWhereAndWhere($where = '', $andWhere = '', $field = '')
    {
        $sumInfo = self::find()->select(['SUM(' . $field . ') as ' . $field])->where($where)->andWhere($andWhere)->asArray()->one();

        return $sumInfo[ $field ];
    }

    /**
     * 获取数量条件里面有andwhere
     *
     * @param string $where
     * @param array  $andWhere
     *
     * @return int|string
     */
    public static function getCountByAndWhere($where = '', $andWhere = [])
    {
        return self::find()->where($where)->andWhere($andWhere)->count();
    }

    /**
     * 插入数据
     *
     * @param array $insertData
     *
     * @return bool|string
     */
    public static function insertData($insertData = [])
    {
        if (empty($insertData)) {
            return false;
        }
        $db = Yii::$app->db;
        $db->createCommand()->insert(static::tableName(), $insertData)->execute();

        return $db->getLastInsertID();
    }

    /**
     * 更新数据
     *
     * @param array $updateData
     * @param array $where
     *
     * @return bool|int
     */
    public static function updateData($updateData = [], $where = [])
    {
        if (empty($updateData)) {
            return false;
        }
        $db = Yii::$app->db;

        return $db->createCommand()->update(static::tableName(), $updateData, $where)->execute();
    }
    /**
     * 通过ID，field获取信息
     * @param string $id
     * @param $field
     * @return mixed
     */
    public static function getInfoByField($id = "", $field = '*')
    {
        $result = self::find()->where(['id' => intval($id)])->asArray()->one();
        return $result[$field];
    }

    public static function imgUrl()
    {
        return Functions::getCommonByKey('img_url');
    }

    /**
     * 获取表注释
     * @return array|null|ActiveRecord
     */
    public function initTableComment()
    {
        if (empty($this->tableComment)) {
            $db = Yii::$app->getDb();
            //获取完整表名
            $tableName = $db->getSchema()->getRawTableName(static::tableName());
            $comment = static::find()->from('information_schema.TABLES a')
                ->select(['DISTINCT(a.table_name) name', 'a.table_comment comment'])
                ->leftJoin('information_schema.COLUMNS b', 'a.table_name = b.TABLE_NAME')
                ->where(['a.table_schema' => "jr_app", 'a.table_name' => $tableName])
                ->asArray()->one();
            $this->tableComment = $comment['comment'];
        }
    }

    /**
     * 初始化表结构
     * @return null
     */
    public function initTableColumns () {
        if (empty($this->tableColumns)) {
            $this->tableColumns = static::getTableSchema()->columns;
        }
    }
    /**
     * 插入数据并更新日志
     * @param array $insertData
     *
     * @return bool|string
     */
    public function insertDataWithLog($insertData = [])
    {
        if (empty($insertData) || !is_array($insertData)) {
            return false;
        }
        $this->initTableColumns();
        $this->initTableComment();
        $db = Yii::$app->db;
        $db->createCommand()->insert(static::tableName(), $insertData)->execute();
        $newId = $db->getLastInsertID();
        //记录日志
        $logData = [];
        foreach ($this->tableColumns as $field => $column) {
            foreach ($insertData as $k => $v) {
                if ($k == $field && !empty($column->comment)) {
                    $logData[] = ['item' => $column->comment, 'data' => $v];
                }
            }
        }
        //获取表注释
        $operaRes = Operate::recordOperate('新增数据-' . $this->tableComment, $logData);
        if ($operaRes === false) {
            return false;
        }

        return $newId;
    }

    /**
     * 更新数据并更新日志
     * @param array $updateData
     * @param array $where
     *
     * @return bool|int
     */
    public function updateDataWithLog($updateData = [], $where = [])
    {
        if (empty($updateData) || !is_array($updateData) || !is_array($where)) {
            return false;
        }

        $this->initTableColumns();
        $this->initTableComment();
        $db = Yii::$app->db;
        $oldData = static::getOneByWhere($where, array_keys($updateData));
        $updateRes = $db->createCommand()->update(static::tableName(), $updateData, $where)->execute();
        //记录操作日志
        $logData = [];
        $logAim = [];

        foreach ($this->tableColumns as $field => $column) {
            foreach ($updateData as $k => $v) {
                if ($field == $k && $v != $oldData[$k]) {
                    $logData[] = ['item' => $column->comment, 'oldData' => $oldData[ $k ], 'newData' => $v];
                }
            }
            foreach ($where as $wk => $wv) {
                if ($field == $wk) {
                    $logAim[] = ['where' => $column->comment, 'value' => $wv];
                }
            }
        }
        //获取表注释
        $operaRes = Operate::recordOperate('更新-' . $this->tableComment, $logData, $logAim);

        return $updateRes && $operaRes ? $updateRes : false;
    }

    /**
     * 获取存储字段，post字段必须和数据库字段一致
     * @param string $scenariosName
     * @param array  $postData
     *
     * @return array
     *
     */
    public function getSaveData($scenariosName = '', $postData = []) {
        $scenarios = $this->scenarios();
        $data = [];
        foreach ($postData as $k => $v) {
            if (in_array($k, $scenarios[$scenariosName]) && array_key_exists($k, $this->tableColumns)) {
                $data[$k] = $v;
            }
        }
        return $data;
    }

    /**
     * 删除数据
     * @param string $scenariosName
     * @param array  $postData
     *
     * @return array
     *
     */
    public function delByWhere($where = array()) {
        if (count($where)<=0) {
            return false;
        }
        return static::deleteAll($where);
    }
}
