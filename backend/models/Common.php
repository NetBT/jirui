<?php
namespace backend\models;

use common\models\Functions;
use common\models\Status;
use Yii;

class Common extends \common\models\Common
{
    protected $_Pagination = ['offset' => '', 'limit' => '', 'start' => 0, 'length' => 30, 'limitFlag' => true,'order' => ''];
    protected $businessId = '';


    protected function setPagination() {
        $this->_Pagination['start'] = Yii::$app->request->post('start');
        $this->_Pagination['length'] = Yii::$app->request->post('length');
        $this->_Pagination['limitFlag'] = isset($this->_Pagination['start']) && $this->_Pagination['length'] != -1;
        if($this->_Pagination['limitFlag'])
        {
            $this->_Pagination['offset'] = $this->_Pagination['start'];
            $this->_Pagination['limit'] = $this->_Pagination['length'];
        }

        $this->_Pagination['order'] = '';
        $order = Yii::$app->request->post('order');
        $orderColumn = $order[0]['column'];
        $orderDir = $order[0]['dir'];
        $columns = Yii::$app->request->post('columns');
        if($orderColumn) {
            $this->_Pagination['order'] =  $columns[$orderColumn]['data'] .' '.$orderDir;
        }
    }
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (!Yii::$app->user->isGuest) {
            $this->businessId = Yii::$app->user->identity->alliance_business_id;
        }
    }


    //数组排序
    public function orderArray($list)
    {
        //对排序查出来的数组继续进行排序
        foreach($list as $key => $value)
        {
            if(!is_array($value)){return false;}
            if($list[$key]['parent_id'] == "0")
            {
                $list[$key]['new_path'] = $value['id'];
                $list[$key]['path_count'] = $this->pathCount($value['id']);
            }else
            {
                $list[$key]['new_path'] = $value['parent_id'].','.$value['id'];
                $list[$key]['path_count'] = $this->pathCount($value['parent_id'].','.$value['id']);
            }
        }
        return $this->multiArraySort($list,'new_path',SORT_ASC);
    }

    //进行数组排序
    public function multiArraySort($multiArray,$sortField,$sortType = SORT_ASC)
    {
        if (!is_array($multiArray)) return FALSE;
        foreach ($multiArray as $row){
            if(!is_array($row)) return FALSE;
            $arrField[] = $row[$sortField];
        }
        array_multisort($arrField,$sortType,SORT_NATURAL,$multiArray);
        return $multiArray;
    }

    //更新路径
    public function pathCount($pathStr)
    {
        $m = substr_count($pathStr,",");
        return str_repeat("&nbsp;",$m*10)."|- -";
    }

    public static function checkEmployeeType() {
        if (Yii::$app->user->isGuest) {
            return false;
        }
        if (Yii::$app->user->identity->alliance_business_id == 1) {
            return Status::MODULE_TYPE_HEADQUARTERS;
        } else if (empty(Yii::$app->user->identity->alliance_business_id)){
            return Status::MODULE_TYPE_GUEST;
        } else {
            return Status::MODULE_TYPE_FRANCHISEE;
        }
    }

    public static function getBusinessId() {
        if (Yii::$app->user->isGuest) {
            return false;
        }
        return Yii::$app->user->identity->alliance_business_id;
    }

    /**
     * 获取andWhere 时间
     * @param null $startTime
     * @param null $endTime
     * @param null $field
     *
     * @return array
     */
    public function getAndWhereForTime($field = null, $startTime = null, $endTime = null) {
        if (empty($field) || !array_key_exists($field, $this->tableColumns)) {
            return [];
        }
        if (!empty($startTime) && !empty($endTime)) {
            $andWhere = ['between', $field, $startTime, $endTime];
        } elseif (!empty($post['start']) && empty($endTime)) {
            $andWhere = ['>=', $field, $startTime];
        } elseif (empty($post['start']) && !empty($endTime)) {
            $andWhere = ['<=', $field, $endTime];
        } else {
            $andWhere = [];
        }
        return $andWhere;
    }

    /**
     * 获取 $key=>$value 格式的数组
     * @param $where
     * @param $key
     * @param $value
     * @return array
     */
    public static function getFormArray($where,$key,$value) {
        $list = static::getByWhere($where,  [$key, $value]);
        return Functions::extractKey($list, $key, $value);
    }

    /**
     * 获取 $key=>$value 格式的数组
     * @param $where
     * @param $key
     * @param $value
     * @return array
     */
    public static function getForm($where) {
        $list = static::getByWhere($where);
        return Functions::extractKey($list);
    }

    /**
     * 获取 $key=>$value 格式的数组
     * @param $where
     * @param $andWhere
     * @param $key
     * @param $value
     * @return array
     */
    public static function getFormArrayAndWhere($where, $andWhere, $key, $value) {
        $list = static::getByAndWhere($where, $andWhere, [$key, $value]);
        return Functions::extractKey($list, $key, $value);
    }
}
